plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.21.0'
	id 'jacoco'
	id "org.sonarqube" version "4.3.0.3225"
}

sonarqube {
	properties {
		property "sonar.projectKey", "BoxStreamIdentity"
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.login", "sqp_ed5480f90baea3a4e9918e5548805ca587288cb6"
	}
}


spotless {
	java {
		target 'src/main/java/com/boxstream/bs_identity/exception/**/*.java', 'src/main/java/com/boxstream/bs_identity/dto/**/*.java'

		// Apply Google's Java Style Guide
		googleJavaFormat('1.17.0') // Specify the version

		// Add additional rules, if needed
		removeUnusedImports() // Removes unused imports
		trimTrailingWhitespace() // Removes trailing whitespaces
		endWithNewline() // Ensures files end with a single newline

		// 1 tab = 4 spaces
		indentWithSpaces(4)
	}

	format 'misc', {
		target '*.gradle', '*.md', '*.yml', '*.yaml'
		trimTrailingWhitespace()
		endWithNewline()
	}
}


jacoco {
	toolVersion = "0.8.10" // Specify JaCoCo version
}

tasks.jacocoTestReport {
	reports {
		xml.required = true  // Enable XML report (useful for CI tools like SonarQube)
		html.required = true // Enable HTML report for easy review
	}

	// Exclude classes or packages
	classDirectories.setFrom(
			files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
						// Exclude package
						'com/boxstream/bs_identity/dto/**',
						'com/boxstream/bs_identity/entity/**',
						'com/boxstream/bs_identity/mapper/**',

						// Exclude specific class
						'com/boxstream/bs_identity/controller/RoleController.class',
						'com/boxstream/bs_identity/controller/PermissionController.class',
						'com/boxstream/bs_identity/controller/RoleController.class'
				])
			})
	)
}

tasks.jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.8 // Ensure at least 80% code coverage
			}
		}
	}
}



group = 'com.boxstream'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-logging'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

	//implementation 'com.nimbusds:nimbus-jose-jwt:9.37.2' // OK
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2'

	testImplementation 'org.testcontainers:testcontainers:1.19.0'                // Core Testcontainers library
	testImplementation 'org.testcontainers:junit-jupiter:1.19.0'               // JUnit 5 integration
	testImplementation 'org.testcontainers:mysql:1.19.0'                      // MySQL container

	// MapStruct
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'

	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test:6.1.4' // Replace with your Spring Security version

	// H2 DB
	testImplementation group: 'com.h2database', name: 'h2', version: '2.2.224'
}


tasks.named('test') {
	useJUnitPlatform()

}
